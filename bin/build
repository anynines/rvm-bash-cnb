#!/usr/bin/env bash

set -eo pipefail
echo "---> RVM Buildpack"

# 1. Arguments according to CNB spec
LAYERSDIR="$1"
PLAN="$3"

DEFAULT_RUBY_VERSION="2.7.1"

# The "yj" binary is required to transform TOML code into JSON code below
curl -sSL --output /tmp/yj https://github.com/sclevine/yj/releases/download/v4.0.0/yj-linux
chmod +x /tmp/yj

# 2. INSTALL RVM AND A CONF'ABLE VERSION OF RUBY
RVM_VERSION="1.29.10"
RVMLAYER="${LAYERSDIR}/rvm"
REMOTE_RVM_VERSION=""
if [[ -f "${RVMLAYER}.toml" ]]; then
  REMOTE_RVM_VERSION=$(cat "${RVMLAYER}.toml" | /tmp/yj -t | jq -r .metadata.rvm_version 2>/dev/null || echo 'not found')
fi

export rvm_path="${RVMLAYER}"
export rvm_scripts_path="${RVMLAYER}/scripts"
export rvm_autoupdate_flag=0
if [[ $RVM_VERSION == $REMOTE_RVM_VERSION ]]; then
  echo "---> Reusing cached RVM version ${RVM_VERSION}"
else
  mkdir -p "${RVMLAYER}/env"
  mkdir -p "${RVMLAYER}/profile.d"

  echo -n "${RVMLAYER}" > "${RVMLAYER}/env/rvm_path.override"
  echo -n "${RVMLAYER}/scripts" > "${RVMLAYER}/env/rvm_scripts_path.override"
  echo -n "0" > "${RVMLAYER}/env/rvm_autoupdate_flag.override"
  ln -sf "${RVMLAYER}/scripts/rvm" "$RVMLAYER/profile.d"

  echo "---> Installing RVM version ${RVM_VERSION}"
  curl -sSL https://rvm.io/mpapis.asc | gpg --import -
  curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -
  curl -sSL https://get.rvm.io | bash -s -- --version ${RVM_VERSION}
fi

# If a .ruby-version file exists, use the version specified in there.
if [[ -f .ruby-version ]]; then
  DEFAULT_RUBY_VERSION=$(cat .ruby-version | tr -d '[:space:]')
fi

source "${RVMLAYER}/scripts/rvm"
REMOTE_RUBY_VERSION=""
if [[ -f "${RVMLAYER}.toml" ]]; then
  REMOTE_RUBY_VERSION=$(cat "${RVMLAYER}.toml" | /tmp/yj -t | jq -r .metadata.ruby_version 2>/dev/null || echo 'not found')
fi

if [[ $REMOTE_RUBY_VERSION == "" || $DEFAULT_RUBY_VERSION != $REMOTE_RUBY_VERSION ]]; then
  echo "---> Installing Ruby version ${DEFAULT_RUBY_VERSION}"
  rvm autolibs 0
  rvm remove all --force
  rvm install ${DEFAULT_RUBY_VERSION}
  gem install -N rubygems-update
  gem update -N --system
  gem cleanup
  rvm cleanup all
else
  echo "---> Ruby version ${DEFAULT_RUBY_VERSION} already installed"
fi

# Write Layer Content Metadata according to
# https://github.com/buildpacks/spec/blob/master/buildpack.md#layer-content-metadata-toml
echo -e "build = true\ncache = true\nlaunch = true\n" > "${RVMLAYER}.toml"
echo "[metadata]" >> "${RVMLAYER}.toml"
echo "rvm_version = \"$RVM_VERSION\"" >> "${RVMLAYER}.toml"
echo "ruby_version = \"$DEFAULT_RUBY_VERSION\"" >> "${RVMLAYER}.toml"

# Look for the line "BUNDLED WITH" and if found use the next line as the
# version of Bundler to be installed.
BUNDLER_VERSION=""
if [[ -f Gemfile.lock ]]; then
  FOUND_BUNDLED_WITH=0
  while read -r line
  do
    if [[ $FOUND_BUNDLED_WITH -eq 1 ]]; then
      BUNDLER_VERSION="$line"
      break
    fi

    if [[ "$line" == "BUNDLED WITH" ]]; then
      FOUND_BUNDLED_WITH=1
    fi
  done < "Gemfile.lock"
fi

# INSTALL BUNDLER
GEM_BUNDLER_ARGS=""
if [[ $BUNDLER_VERSION != "" ]]; then
  echo "---> Installing bundler version $BUNDLER_VERSION"
  GEM_BUNDLER_ARGS="--version $BUNDLER_VERSION"
else
  echo "---> Installing latest bundler version"
fi
gem install bundler --no-document $GEM_BUNDLER_ARGS

# INSTALL THE PUMA APP SERVER
if [[ -f Gemfile.lock && $(grep -c " puma " Gemfile.lock) -ge 1 ]]; then
  echo "---> Using Puma specified in Gemfile"
else
  echo "---> Adding Puma to Gemfile"
  echo "gem 'puma'" >> Gemfile
fi

if [[ ! -f config/puma.rb ]]; then
  echo "---> Creating config/puma.rb in the application directory"
  echo "bind 'tcp://0.0.0.0:8080'" > config/puma.rb
  echo "workers 5" >> config/puma.rb
  echo "threads 5, 5" >> config/puma.rb
  echo "log_requests true" >> config/puma.rb
  echo "preload_app!" >> config/puma.rb
fi

# 5. INSTALL GEMS
# Compares previous Gemfile.lock checksum to the current Gemfile.lock
BUNDLERLAYER="${LAYERSDIR}/bundler"
echo "---> Running 'bundle install'"
mkdir -p "$BUNDLERLAYER"
bundle config --local path "$BUNDLERLAYER" >/dev/null
echo -e "build = true\ncache = true\nlaunch = true\n" > "$BUNDLERLAYER.toml"
bundle install

set +e
bundle clean
set -e

# 6. SET DEFAULT START COMMAND
if [[ -f Procfile && $(grep -c "^web:.*$" Procfile) -ge 1 ]]; then
  echo "---> Not specifying a launch command because a Procfile is present in the app root directory which includes a process of type 'web:'"
else
  echo -n "---> Specifying launch command: "
  echo '[{ type = "web", command = "bundle exec puma"}]'
  echo 'processes = [{ type = "web", command = "bundle exec puma"}]' > "${LAYERSDIR}/launch.toml"
fi
