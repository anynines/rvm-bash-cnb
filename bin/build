#!/usr/bin/env bash

set -eo pipefail
echo "---> RVM Buildpack"

# 1. Arguments according to CNB spec
LAYERSDIR="$1"
PLAN="$3"

# If a .ruby-version file exists, use the version specified in there.
RUBY_VERSION=2.6.5
if [[ -f .ruby-version ]]; then
  RUBY_VERSION=$(cat .ruby-version | tr -d '[:space:]')
fi

# Look for the line "BUNDLED WITH" and if found use the next line as the
# version of Bundler to be installed.
BUNDLER_VERSION=""
if [[ -f Gemfile.lock ]]; then
  FOUND_BUNDLED_WITH=0
  while read -r line
  do
    if [[ $FOUND_BUNDLED_WITH -eq 1 ]]; then
      BUNDLER_VERSION="$line"
      break
    fi

    if [[ "$line" == "BUNDLED WITH" ]]; then
      FOUND_BUNDLED_WITH=1
    fi
  done < "Gemfile.lock"
fi

# The "yj" binary is required to transform TOML code into JSON code below
curl -sSL --output /tmp/yj https://github.com/sclevine/yj/releases/download/v4.0.0/yj-linux
chmod +x /tmp/yj

# 2. INSTALL RVM AND A CONF'ABLE VERSION OF RUBY
RVMVERSION="1.29.9"
RVMLAYER="${LAYERSDIR}/rvm"
REMOTE_RVM_VERSION=""
if [[ -f "${RVMLAYER}.toml" ]]; then
  REMOTE_RVM_VERSION=$(cat "${RVMLAYER}.toml" | /tmp/yj -t | jq -r .metadata 2>/dev/null || echo 'not found')
fi

export rvm_path="${RVMLAYER}"
export rvm_scripts_path="${RVMLAYER}/scripts"
if [[ $RVMVERSION == $REMOTE_RVM_VERSION ]] ; then
  echo "---> Reusing cached RVM version ${RVMVERSION}"
else
  mkdir -p "${RVMLAYER}/env"
  mkdir -p "${RVMLAYER}/profile.d"

  echo -n "${RVMLAYER}" > "${RVMLAYER}/env/rvm_path"
  echo -n "${RVMLAYER}/scripts" > "${RVMLAYER}/env/rvm_scripts_path"
  ln -sf "${RVMLAYER}/scripts/rvm" "$RVMLAYER/profile.d"

  echo "---> Installing RVM version ${RVMVERSION}"
  curl -sSL https://get.rvm.io | bash -s -- --version ${RVMVERSION}
fi

echo "---> Installing Ruby version ${RUBY_VERSION}"
source "${RVMLAYER}/scripts/rvm"
rvm autolibs disable
rvm install ${RUBY_VERSION}
echo -e "build = true\ncache = true\nlaunch = true\nmetadata = \"$RVMVERSION\"" > "${RVMLAYER}.toml"

# INSTALL BUNDLER
GEM_BUNDLER_ARGS=""
if [[ $BUNDLER_VERSION != "" ]]; then
  echo "---> Installing bundler version $BUNDLER_VERSION"
  GEM_BUNDLER_ARGS="--version $BUNDLER_VERSION"
else
  echo "---> Installing latest bundler version"
fi
gem install bundler --no-document $GEM_BUNDLER_ARGS

# INSTALL PUMA AS APPSERVER
gem install puma --no-document

# 5. INSTALL GEMS
# Compares previous Gemfile.lock checksum to the current Gemfile.lock
BUNDLERLAYER="${LAYERSDIR}/bundler"
LOCAL_BUNDLER_CHECKSUM=$(sha256sum Gemfile.lock | cut -d ' ' -f 1)
REMOTE_BUNDLER_CHECKSUM=""
if [[ -f "${BUNDLERLAYER}.toml" ]]; then
  REMOTE_BUNDLER_CHECKSUM=$(cat "${BUNDLERLAYER}.toml" | /tmp/yj -t | jq -r .metadata 2>/dev/null || echo 'not found')
fi

if [[ -f Gemfile.lock && $LOCAL_BUNDLER_CHECKSUM == $REMOTE_BUNDLER_CHECKSUM ]] ; then
  # Determine if no gem dependencies have changed, so it can reuse existing
  # gems without running bundle install
  echo "---> Reusing cached Gems"
  bundle config --local path "$BUNDLERLAYER" >/dev/null
  bundle config --local bin "$BUNDLERLAYER/bin" >/dev/null
else
  # Determine if there has been a gem dependency change and install new gems on
  # the bundler layer, re-using existing and un-changed gems
  BUNDLERLAYER="${LAYERSDIR}/bundler"
  echo "---> Running 'bundle install'"
  mkdir -p "$BUNDLERLAYER"
  echo -e "cache = true\nlaunch = true\nmetadata = \"$LOCAL_BUNDLER_CHECKSUM\"" > "$BUNDLERLAYER.toml"
  bundle install --path "$BUNDLERLAYER" --binstubs "$BUNDLERLAYER/bin"
fi

# 6. SET DEFAULT START COMMAND
echo 'processes = [{ type = "web", command = "bundle exec rake db:create && bundle exec rake db:migrate && bundle exec rake assets:precompile && bundle exec rails server -b 0.0.0.0 -p 8080"}]' > "${LAYERSDIR}/launch.toml"
